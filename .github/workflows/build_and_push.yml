---
name: Build and Push Docker Image
on:
  push:
    branches: [main, master, test, dev, develop]
    tags: ["*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allows manual triggering
permissions:
  contents: write
  pull-requests: write
  packages: write
  actions: read
  deployments: read
  id-token: write
  issues: write
  discussions: read
  pages: read
  repository-projects: read
  security-events: read
  attestations: read # Added this
  checks: write # Added this
  statuses: write # Added
jobs:
  super-lint:
    name: Lint code base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Super-Linter
        uses: github/super-linter@main
        env:
          DEFAULT_BRANCH: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: ${{ github.event_name != 'pull_request' }}
          DOCKERFILE_HADOLINT_FILE_NAME: .hadolint.yaml
  build-and-push:
    needs: super-lint
    name: Build and Push Docker Image
    uses: marcinbojko/reusable-workflows/.github/workflows/docker_build_and_push.yml@main
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # verify-plugins:
  #   name: Verify Plugins and Victoria Metrics plugin
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Extract Docker Image Info from Dockerfile
  #       id: image-info
  #       run: |
  #         # Extract release and version from Dockerfile labels (following your script pattern)
  #         maintainer=$(grep -i "LABEL MAINTAINER" Dockerfile | awk '{print $2}' | cut -d\" -f2)
  #         release=$(grep -i "LABEL RELEASE" Dockerfile | awk '{print $2}' | cut -d\" -f2)
  #         version=$(grep -i "LABEL VERSION" Dockerfile | awk '{print $2}' | cut -d\" -f2)
  #         echo "Maintainer: \"$version\" found"
  #         echo "Version: \"$version\" found"
  #         echo "Release: \"$release\" found"
  #         if [ -n "$version" ] && [ -n "$release" ]; then
  #           # Construct full image name with maintainer prefix
  #           FULL_IMAGE_NAME="${maintainer}/${release}:${version}"
  #           {
  #             echo "image-name=${FULL_IMAGE_NAME}"
  #             echo "image-release=${release}"
  #             echo "image-version=${version}"
  #           } >> "$GITHUB_OUTPUT"
  #           echo "Using Docker image: ${FULL_IMAGE_NAME}"
  #         else
  #           echo "Error: Could not extract version or release from Dockerfile"
  #           exit 1
  #         fi
  #     - name: Pull Docker Image
  #       run: |
  #         docker pull ${{ steps.image-info.outputs.image-name }}

  #     - name: Verify Plugins and Victoria Metrics
  #       run: |
  #         docker run --rm ${{ steps.image-info.outputs.image-name }} /bin/bash -c "
  #           # Verify plugins are installed
  #           plugin_list=\$(ls /path/to/plugins 2>/dev/null || echo '')
  #           if [ -z \"\$plugin_list\" ]; then
  #             echo \"Warning: No plugins found in /path/to/plugins\"
  #             # You might want to check alternative paths or make this non-fatal
  #             # exit 1
  #           else
  #             echo \"Found plugins: \$plugin_list\"
  #           fi

  #           # Verify Victoria Metrics is installed
  #           if command -v victoria-metrics >/dev/null 2>&1; then
  #             victoria_metrics_version=\$(victoria-metrics --version 2>&1 || echo 'version check failed')
  #             echo \"Victoria Metrics version: \$victoria_metrics_version\"
  #           else
  #             echo \"Victoria Metrics command not found\"
  #             exit 1
  #           fi
  #         "
  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
